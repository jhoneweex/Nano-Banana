
import { GoogleGenAI, Modality } from "@google/genai";
import { AspectRatio, UploadedImage } from "../types";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
    console.error("API_KEY environment variable not set.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY! });

const PROMPT_ENHANCEMENTS = "Create an ultra-realistic 8K image with cinematic lighting. If reference images are provided, you MUST preserve the facial identity of up to three people from the reference images with perfect accuracy.";

export const fileToBase64 = (file: File): Promise<{ base64: string, mimeType: string }> => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => {
            const result = reader.result as string;
            const base64 = result.split(',')[1];
            resolve({ base64, mimeType: file.type });
        };
        reader.onerror = error => reject(error);
    });
};

export const generateImage = async (
    prompt: string, 
    images: UploadedImage[], 
    aspectRatio: AspectRatio
): Promise<string> => {
    const fullPrompt = `${prompt}. ${PROMPT_ENHANCEMENTS}`;

    try {
        if (images.length > 0) {
            // Editing or Merging with 'nano-banana'
            const imageParts = images.map(img => ({
                inlineData: {
                    data: img.base64,
                    mimeType: img.mimeType,
                },
            }));

            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash-image',
                contents: {
                    parts: [
                        ...imageParts,
                        { text: fullPrompt },
                    ],
                },
                config: {
                    responseModalities: [Modality.IMAGE, Modality.TEXT],
                },
            });
            
            for (const part of response.candidates[0].content.parts) {
                if (part.inlineData) {
                    return part.inlineData.data;
                }
            }
            throw new Error("No image part in response from nano-banana model.");

        } else {
            // Generating a new image
            const response = await ai.models.generateImages({
                model: 'imagen-4.0-generate-001',
                prompt: fullPrompt,
                config: {
                    numberOfImages: 1,
                    outputMimeType: 'image/jpeg',
                    aspectRatio: aspectRatio,
                },
            });
            
            if (response.generatedImages && response.generatedImages.length > 0) {
                return response.generatedImages[0].image.imageBytes;
            }
            throw new Error("No image generated by imagen model.");
        }
    } catch (error) {
        console.error("Error calling Gemini API:", error);
        throw error;
    }
};
